[{"/Users/maple/WebstormProjects/BeerDB/client/src/App.js":"1","/Users/maple/WebstormProjects/BeerDB/client/src/reducers/index.js":"2","/Users/maple/WebstormProjects/BeerDB/client/src/components/LandingPage.jsx":"3","/Users/maple/WebstormProjects/BeerDB/client/src/actions/index.js":"4"},{"size":528,"mtime":1606537895907,"results":"5","hashOfConfig":"6"},{"size":564,"mtime":1606540276725,"results":"7","hashOfConfig":"6"},{"size":4724,"mtime":1606542582510,"results":"8","hashOfConfig":"6"},{"size":798,"mtime":1606540142539,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uoqkmf",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maple/WebstormProjects/BeerDB/client/src/App.js",[],"/Users/maple/WebstormProjects/BeerDB/client/src/reducers/index.js",[],["20","21"],"/Users/maple/WebstormProjects/BeerDB/client/src/components/LandingPage.jsx",["22"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {fetchBeers, fetchBeerImages} from '../actions';\n\nclass LandingPage extends Component {\n    constructor() {\n        super();\n\n        this.state = {filteredBeers: [], page: 1};\n        this.hasBeerListSet = false;\n        this.searchTimer = null;\n    }\n\n    render() {\n        let {beers, beerImages} = this.props;\n        let {filteredBeers, page} = this.state;\n\n        if (beers)\n            return (\n                <div>\n                    <div style={{padding: '50px'}}>\n                        <span style={{fontSize: '20px', fontWeight: 600, marginRight: '30px'}}>\n                            BeerDB\n                        </span>\n                        <input type=\"text\" style={{height: '40px', borderRadius: '40px', width: '300px', paddingLeft: '15px', boxShadow: 'none', outline: 'none'}} placeholder=\"type a brand name here ....\" onChange={(e) => {\n                            if (this.searchTimer) clearTimeout(this.searchTimer);\n                            let value = e.target.value;\n\n                            this.searchTimer = setTimeout(() => {\n                                let newFilteredBeers = beers.filter(f => f.name.toLowerCase().includes(value.toLowerCase()));\n                                this.setState({filteredBeers: newFilteredBeers});\n                            }, 100);\n                        }} />\n                    </div>\n                    <div style={{padding: '0 0 0 50px', margin: '0 0 50px'}}>\n                        <button style={{marginRight: '20px'}} onClick={() => {\n                            if (page > 1) \n                                this.setState({page: page-1});\n                        }}>Prev</button>\n                        {page}\n                        <button style={{marginLeft: '20px'}} onClick={() => {\n                            let totalPages = Math.ceil(filteredBeers.length/20);\n                            if (page < totalPages)\n                                this.setState({page: page+1});\n                        }}>Next</button>\n                    </div>\n                    <div style={{padding: '0 0 0 50px'}}>\n                        {\n                            (() => {\n                                let output = [];\n                                for (let i = (page-1)*20; i < (page*20) && i < filteredBeers.length; i++) {\n                                    output.push(\n                                        <div style={{display: 'flex'}}>\n                                            <img src={beerImages[output.length%5].image} style={{height: '150px', width: 'auto', marginRight: '20px'}} />\n                                            <div>\n                                                {\n                                                    [\n                                                        {text: 'Product ID', value: filteredBeers[i].id},\n                                                        {text: 'Name', value: filteredBeers[i].name},\n                                                        {text: 'Style', value: filteredBeers[i].style},\n                                                        {text: 'Volume', value: filteredBeers[i].ounces + ' ounces'},\n                                                        {text: 'Alocohol Percentage', value: `${filteredBeers[i].abv*100}%`}\n                                                    ].map(v => (\n                                                        <p>{v.text} : {v.value}</p>\n                                                    ))\n                                                }\n                                            </div>\n                                        </div>\n                                    )\n                                }\n                                return output;\n                            })()\n                        }\n                    </div>\n                </div>\n            )\n        else \n            return (\n                <div>\n                    Loading....\n                </div>\n            )\n    }\n\n    componentDidMount() {\n        let {fetchBeers, fetchBeerImages} = this.props;\n\n        fetchBeers();\n        fetchBeerImages();\n    }\n\n    componentDidUpdate() {\n        let {beers} = this.props;\n\n        if (beers && !this.hasBeerListSet) {\n            let newFilteredBeers = JSON.parse(JSON.stringify(beers));\n            this.hasBeerListSet = true;\n            this.setState({filteredBeers: newFilteredBeers});\n        }\n    }\n}\n\nfunction mapStateToProps({beers, beerImages}) {\n    return {beers, beerImages}\n}\n\nexport default connect(mapStateToProps, {fetchBeers, fetchBeerImages})(LandingPage);","/Users/maple/WebstormProjects/BeerDB/client/src/actions/index.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":54,"column":45,"nodeType":"29","endLine":54,"endColumn":154},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]